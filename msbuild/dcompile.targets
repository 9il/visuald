<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DCompiler Condition="'$(DCompiler)' == ''">DMD</DCompiler>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Condition="'$(DCompiler)' != 'None'" Include="$(MSBuildThisFileDirectory)$(DCompiler).xml" />
    <AvailableItemName Condition="'$(DCompiler)' != 'None'" Include="DCompile">
        <Targets>_DMD</Targets>
    </AvailableItemName>
  </ItemGroup>

  <PropertyGroup>
    <DbuildCompileDDLLPath Condition="'$(DbuildCompileDDLLPath)' == ''">$(MSBuildThisFileDirectory)dbuild.$(MsBuildToolsVersion).dll</DbuildCompileDDLLPath>
  </PropertyGroup>

  <UsingTask TaskName="dbuild.CompileD" AssemblyFile="$(DbuildCompileDDLLPath)" />

  <!-- remove disabled files from DCompile -->
  <Target Name="_collectDFiles"
    DependsOnTargets="_SelectedFiles">
    
    <ItemGroup Condition="'$(DCompiler)' == 'None'">
      <DCompile Remove="@(DCompile)" />
    </ItemGroup>
    
    <ItemGroup Condition="'@(SelectedFiles)' != ''">
      <DCompile Remove="@(DCompile)" Condition="'%(Identity)' != '@(SelectedFiles)'" />
    </ItemGroup>
    
    <ItemGroup>
      <DCompile Remove="@(DCompile)" Condition="'%(DCompile.ExcludedFromBuild)' == 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="_replacePackageName">
    <!-- <Message Text="PRE:  %(DCompile.Identity)  RelativeDir:%(DCompile.RelativeDir) ObjFile:%(DCompile.ObjectFileName)" Importance="high" />
    -->

    <!-- extract package name from relative dir, avoid parent folder and drive names in package name -->
    <ItemGroup>
      <DCompile>
        <PackageName>$([System.String]::Copy('%(RelativeDir)|').Replace('\|','').Replace('|','').Replace('..','__').Replace(':','_').Replace('\','.'))</PackageName>
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'Project'">
        <ObjectFileName>$(IntDir)dcompile_$(ProjectName).obj</ObjectFileName>
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'Package'">
        <ObjectFileName>$(IntDir)dpackage_%(PackageName).obj</ObjectFileName>
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'File'">
        <ObjectFileName Condition="'%(PackageName)' == ''">$(IntDir)%(FileName).obj</ObjectFileName>
        <ObjectFileName Condition="'%(PackageName)' != ''">$(IntDir)%(PackageName).%(FileName).obj</ObjectFileName>
      </DCompile>
    </ItemGroup>

    <!-- for custom object file names, use [PackageName] as a placeholder for the package name -->
    <ItemGroup>
      <DCompile>
        <ObjectFileName>$([System.String]::Copy('%(ObjectFileName)').Replace('[PackageName]','%(PackageName)'))</ObjectFileName>
      </DCompile>
    </ItemGroup>

    <!-- <Message Text="POST:  %(DCompile.Identity)  CompilationModel:%(DCompile.CompilationModel) ObjFile:%(DCompile.ObjectFileName)" Importance="high" />
    -->
    
  </Target>

  <Target Name="_DMD"
    BeforeTargets="$(DCompileBeforeTargets)"
    AfterTargets="$(DCompileAfterTargets)"
    Condition="'@(DCompile)' != '' and '$(DCompiler)' != 'None'"
    Outputs="%(DCompile.ObjectFileName)"
    DependsOnTargets="_collectDFiles;_replacePackageName;_SelectedFiles">
    
    <ItemGroup Condition="'@(SelectedFiles)' != ''">
      <DCompile Remove="@(DCompile)" Condition="'%(Identity)' != '@(SelectedFiles)'" />
    </ItemGroup>
    
    <ItemGroup>
      <Parameter Include="Warnings=%(DCompile.Warnings)" />
      <Parameter Include="Deprecations=%(DCompile.Deprecations)" />
      <Parameter Include="Verbose=%(DCompile.Verbose)" />
      <Parameter Include="ShowTLS=%(DCompile.ShowTLS)" />
      <Parameter Include="ShowGC=%(DCompile.ShowGC)" />
      <Parameter Include="Profile=%(DCompile.Profile)" />
      <Parameter Include="ProfileGC=%(DCompile.ProfileGC)" />
      <Parameter Include="Coverage=%(DCompile.Coverage)" />
      <Parameter Condition="'%(DCompile.MinCoverage)' != ''" Include="MinCoverage=%(DCompile.MinCoverage)" />
      <Parameter Include="Unittest=%(DCompile.Unittest)" />
      <Parameter Include="DebugCode=%(DCompile.DebugCode)" />
      <Parameter Include="DebugInfo=%(DCompile.DebugInfo)" />
      <Parameter Include="Optimizer=%(DCompile.Optimizer)" />
      <Parameter Include="Inliner=%(DCompile.Inliner)" />
      <Parameter Include="StackFrame=%(DCompile.StackFrame)" />
      <Parameter Include="StackStomp=%(DCompile.StackStomp)" />
      <Parameter Include="AllInst=%(DCompile.AllInst)" />
      <Parameter Include="BetterC=%(DCompile.BetterC)" />
      <Parameter Include="BoundsCheck=%(DCompile.BoundsCheck)" />
      <Parameter Include="IgnorePragma=%(DCompile.IgnorePragma)" />
      <Parameter Include="ObjectFileName=%(DCompile.ObjectFileName)" />
      <Parameter Include="PerformSyntaxCheckOnly=%(DCompile.PerformSyntaxCheckOnly)" />
      <Parameter Include="PreserveSourcePath=%(DCompile.PreserveSourcePath)" />
      <Parameter Include="ShowDependencies=%(DCompile.ShowDependencies)" />
      <Parameter Include="Main=%(DCompile.Main)" />
      <Parameter Include="CRuntimeLibrary=%(DCompile.CRuntimeLibrary)" />
      <Parameter Include="VersionIdentifiers=$([System.String]::Copy('%(DCompile.VersionIdentifiers)').Replace(';','?'))" />
      <Parameter Include="DebugIdentifiers=$([System.String]::Copy('%(DCompile.DebugIdentifiers)').Replace(';','?'))" />
      <Parameter Include="ImportPaths=$([System.String]::Copy('%(DCompile.ImportPaths)').Replace(';','?'))" />
      <Parameter Include="StringImportPaths=$([System.String]::Copy('%(DCompile.StringImportPaths)').Replace(';','?'))" />
      <Parameter Condition="'%(DCompile.DocDir)' != ''" Include="DocDir=%(DCompile.DocDir)" />
      <Parameter Condition="'%(DCompile.DocFile)' != ''" Include="DocFile=%(DCompile.DocFile)" />
      <Parameter Condition="'%(DCompile.DepFile)' != ''" Include="DepFile=%(DCompile.DepFile)" />
      <Parameter Condition="'%(DCompile.HeaderDir)' != ''" Include="HeaderDir=%(DCompile.HeaderDir)" />
      <Parameter Condition="'%(DCompile.HeaderFile)' != ''" Include="HeaderFile=%(DCompile.HeaderFile)" />
      <Parameter Condition="'%(DCompile.JSONFile)' != ''" Include="JSONFile=%(DCompile.JSONFile)" />
    </ItemGroup>

   <PropertyGroup>
      <_ToolExe Condition="'$(DCompiler)' == 'LDC'">$(LDCBinDir)ldmd2.exe</_ToolExe>
      <_ToolExe Condition="'$(DCompiler)' != 'LDC'">$(DMDBinDir)dmd.exe</_ToolExe>
      <!-- ';' is replaced with '?' above, so these are not replaced when generating the
           list of parameters with seperator '|'. '?' is then replaced back to ';' -->
      <_Parameters>@(Parameter,'|')</_Parameters>
      <Parameters>$([System.String]::Copy('$(_Parameters)').Replace('?',';'))</Parameters>
    </PropertyGroup>

    <!-- <Message Text="Compile D Parameters: $(Parameters)" Importance="high" /> -->

    <CompileD Condition="'@(DCompile)' != ''"
              CommandLineTemplate="-c %(DCompile.CommandLineTemplate)"
              Xaml="$(MSBuildThisFileDirectory)$(DCompiler).xml"
              Parameters="$(Parameters)"
              TrackerLogDirectory="$(TLogLocation)"
              ShowCommandLine="%(DCompile.ShowCommandLine)"
              AdditionalOptions="%(DCompile.AdditionalOptions)"
              Compiler="$(DCompiler)"
              ToolExe="$(_ToolExe)"
              Sources="@(DCompile)" >
    </CompileD>
  </Target>

  <PropertyGroup>
    <ComputeLinkInputsTargets>$(ComputeLinkInputsTargets);ComputeDCompileOutput;</ComputeLinkInputsTargets>
    <ComputeLibInputsTargets>$(ComputeLibInputsTargets);ComputeDCompileOutput;</ComputeLibInputsTargets>
  </PropertyGroup>

  <Target Name="ComputeDCompileOutput"
    Condition="'@(DCompile)' != ''"
    DependsOnTargets="_collectDFiles">

    <ItemGroup>
      <Link Include="@(DCompile->Metadata('ObjectFileName')->Distinct()->ClearMetadata())" />
      <Lib Include="@(DCompile->Metadata('ObjectFileName')->Distinct()->ClearMetadata())" />
    </ItemGroup>

  </Target>

  <PropertyGroup>
    <PatchLinkInputTargets>$(PatchLinkInputTargets);DCompilePatchLinkInput;</PatchLinkInputTargets>
  </PropertyGroup>

  <Target Name="DCompilePatchLinkInput" Condition="'@(DCompile)' != ''">

    <ItemGroup Condition="'$(DCompiler)' == 'DMD'">
      <Link>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'Win32'">$(DMDInstallDir)\windows\lib32mscoff;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'x64'">$(DMDInstallDir)\windows\lib64;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalDependencies Condition="'$(PlatformToolsetVersion)' == '140'">legacy_stdio_definitions.lib;%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
    <ItemGroup Condition="'$(DCompiler)' == 'LDC'">
      <Link>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'Win32'">$(LDCInstallDir)\lib32;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'x64'">$(LDCInstallDir)\lib;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalDependencies Condition="'$(PlatformToolsetVersion)' == '140'">legacy_stdio_definitions.lib;%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
    
  </Target>

  <!-- changing attributes on link options must be applied to all object files (including C++), so we insert
       $(PatchLinkInputTargets) as a dependency into the link chain to guarantee no object files are added later -->
  <Target Name="_Link"
          DependsOnTargets="$(BeforeLinkTargets);$(ComputeLinkInputsTargets);ComputeManifestInputsTargets;ManifestResourceCompile;PrepareResourceNames;MakeDirsForLink;DoLinkOutputFilesMatch;PreLinkEvent;$(PatchLinkInputTargets);Link;ComputeLinkImportLibraryOutputsForClean;$(AfterLinkTargets)"
          Condition="'$(LinkCompiled)' == 'true'">
  </Target>

</Project>
